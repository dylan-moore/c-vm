// Instructions are two bytes long
// First byte is instruction category, second is identifier

#define stack	0
#define 	ipop		0	// pops top item off stack
#define 	iswap		1	// swap top stack items
#define 	iout		2	// output top stack item
#define input			1	
#define 	idouinp		0	// input double		
#define 	iwstrin		1	// input wstr
#define read	2
#define 	idouread	0	// read double		(double)
#define 	iwstrread	1	// read wstr		(wstr)
#define var				3
#define		iregloc		0	// creates regular local
#define		iregglo		1	// creates regular global
#define 	istlocal	2	// stores item into local
#define 	istglobal	3	// stores item into global
#define 	irelocal	4	// reads local
#define 	ireglobal	5	// reads global
#define math	4
#define 	iadd		0	// add
#define 	isub		1	// subtract
#define 	idiv		2	// divide
#define 	imul		3	// multiply
#define 	isin		4	// compute sin
#define 	iasin		5	// compute asin
#define 	icos		6	// compute cos
#define 	iacos		7	// compute acos
#define 	itan		8	// compute tan
#define 	iatan		9	// compute atan
#define 	iatan2		10	// compute atan2
#define 	iexp		11	// compute exp
#define 	iexp2		12	// compute exp2
#define 	iexp10		13	// compute exp10
#define 	ilog		14	// compute log
#define 	ilog2		15	// compute log2
#define 	ilog10		16	// compute log10
#define 	ifabs		17	// compute fabs
#define 	ipow		18	// compute power
#define 	iceil		19	// compute ceil
#define 	ifloor		20	// compute floor
#define 	ifmod		21	// compute fmod
#define 	isqrt		22	// compute sqrt
#define 	ihypot		23	// compute hypot
#define 	iacosh		24	// compute acosh
#define 	iasinh		25	// compute asinh
#define 	iatanh		26	// compute atanh
#define 	icosh		27	// compute cosh
#define 	isinh		28	// compute sinh
#define 	itanh		29	// compute tanh
#define sys		5
#define 	isyspush	0	// push onto syscall stack
#define 	isyscall	1	// execute syscall
#define 	icstruct	2	// creates memory struct	
#define 	iwstruct	3	// writes to memory struct
#define 	irstruct	4	// reads from memory struct
#define jump	6
#define 	call		0	// call (with return support)
#define 	iret		1	// return
#define 	ijmp		2	// unconditional jump
#define 	ijlt		3	// jump less than
#define 	ijet		4	// jump equal to
#define 	ijmt		5	// jump more than
#define util	7
#define 	ihlt		0	// halt
#define 	inop		1	// no operation